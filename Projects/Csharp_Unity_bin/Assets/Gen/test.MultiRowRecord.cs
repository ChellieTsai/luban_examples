
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.test
{
public sealed partial class MultiRowRecord : Luban.BeanBase
{
    public MultiRowRecord(ByteBuf _buf) 
    {
        ID = _buf.ReadInt();
        NAME = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ONE_ROWS = new System.Collections.Generic.List<test.MultiRowType1>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { test.MultiRowType1 _e0;  _e0 = test.MultiRowType1.DeserializeMultiRowType1(_buf); ONE_ROWS.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MULTI_ROWS1 = new System.Collections.Generic.List<test.MultiRowType1>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { test.MultiRowType1 _e0;  _e0 = test.MultiRowType1.DeserializeMultiRowType1(_buf); MULTI_ROWS1.Add(_e0);}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MULTI_ROWS2 = new test.MultiRowType1[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { test.MultiRowType1 __e0;__e0 = test.MultiRowType1.DeserializeMultiRowType1(_buf); MULTI_ROWS2[__index0] = __e0;}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MULTI_ROWS4 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); test.MultiRowType2 _v0;  _v0 = test.MultiRowType2.DeserializeMultiRowType2(_buf);     MULTI_ROWS4.Add(_k0, _v0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MULTI_ROWS5 = new System.Collections.Generic.List<test.MultiRowType3>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { test.MultiRowType3 _e0;  _e0 = test.MultiRowType3.DeserializeMultiRowType3(_buf); MULTI_ROWS5.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MULTI_ROWS6 = new System.Collections.Generic.Dictionary<int, test.MultiRowType2>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); test.MultiRowType2 _v0;  _v0 = test.MultiRowType2.DeserializeMultiRowType2(_buf);     MULTI_ROWS6.Add(_k0, _v0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);MULTI_ROWS7 = new System.Collections.Generic.Dictionary<int, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { int _k0;  _k0 = _buf.ReadInt(); int _v0;  _v0 = _buf.ReadInt();     MULTI_ROWS7.Add(_k0, _v0);}}
    }

    public static MultiRowRecord DeserializeMultiRowRecord(ByteBuf _buf)
    {
        return new test.MultiRowRecord(_buf);
    }

    public readonly int ID;
    public readonly string NAME;
    public readonly System.Collections.Generic.List<test.MultiRowType1> ONE_ROWS;
    public readonly System.Collections.Generic.List<test.MultiRowType1> MULTI_ROWS1;
    public readonly test.MultiRowType1[] MULTI_ROWS2;
    public readonly System.Collections.Generic.Dictionary<int, test.MultiRowType2> MULTI_ROWS4;
    public readonly System.Collections.Generic.List<test.MultiRowType3> MULTI_ROWS5;
    public readonly System.Collections.Generic.Dictionary<int, test.MultiRowType2> MULTI_ROWS6;
    public readonly System.Collections.Generic.Dictionary<int, int> MULTI_ROWS7;
   
    public const int __ID__ = -501249394;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        foreach (var _e in ONE_ROWS) { _e?.ResolveRef(tables); }
        foreach (var _e in MULTI_ROWS1) { _e?.ResolveRef(tables); }
        foreach (var _e in MULTI_ROWS2) { _e?.ResolveRef(tables); }
        foreach (var _e in MULTI_ROWS4.Values) { _e?.ResolveRef(tables); }
        foreach (var _e in MULTI_ROWS5) { _e?.ResolveRef(tables); }
        foreach (var _e in MULTI_ROWS6.Values) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + ID + ","
        + "name:" + NAME + ","
        + "one_rows:" + Luban.StringUtil.CollectionToString(ONE_ROWS) + ","
        + "multi_rows1:" + Luban.StringUtil.CollectionToString(MULTI_ROWS1) + ","
        + "multi_rows2:" + Luban.StringUtil.CollectionToString(MULTI_ROWS2) + ","
        + "multi_rows4:" + Luban.StringUtil.CollectionToString(MULTI_ROWS4) + ","
        + "multi_rows5:" + Luban.StringUtil.CollectionToString(MULTI_ROWS5) + ","
        + "multi_rows6:" + Luban.StringUtil.CollectionToString(MULTI_ROWS6) + ","
        + "multi_rows7:" + Luban.StringUtil.CollectionToString(MULTI_ROWS7) + ","
        + "}";
    }
}

}

