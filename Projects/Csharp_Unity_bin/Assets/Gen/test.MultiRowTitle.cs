
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.test
{
public sealed partial class MultiRowTitle : Luban.BeanBase
{
    public MultiRowTitle(ByteBuf _buf) 
    {
        ID = _buf.ReadInt();
        NAME = _buf.ReadString();
        X1 = test.H1.DeserializeH1(_buf);
        if(_buf.ReadBool()){ X2_0 = test.H2.DeserializeH2(_buf); } else { X2_0 = null; }
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);X2 = new System.Collections.Generic.List<test.H2>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { test.H2 _e0;  _e0 = test.H2.DeserializeH2(_buf); X2.Add(_e0);}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);X3 = new test.H2[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { test.H2 __e0;__e0 = test.H2.DeserializeH2(_buf); X3[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);X4 = new test.H2[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { test.H2 __e0;__e0 = test.H2.DeserializeH2(_buf); X4[__index0] = __e0;}}
    }

    public static MultiRowTitle DeserializeMultiRowTitle(ByteBuf _buf)
    {
        return new test.MultiRowTitle(_buf);
    }

    public readonly int ID;
    public readonly string NAME;
    public readonly test.H1 X1;
    public readonly test.H2 X2_0;
    public readonly System.Collections.Generic.List<test.H2> X2;
    public readonly test.H2[] X3;
    public readonly test.H2[] X4;
   
    public const int __ID__ = 540002427;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        X1?.ResolveRef(tables);
        X2_0?.ResolveRef(tables);
        foreach (var _e in X2) { _e?.ResolveRef(tables); }
        foreach (var _e in X3) { _e?.ResolveRef(tables); }
        foreach (var _e in X4) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + ID + ","
        + "name:" + NAME + ","
        + "x1:" + X1 + ","
        + "x2_0:" + X2_0 + ","
        + "x2:" + Luban.StringUtil.CollectionToString(X2) + ","
        + "x3:" + Luban.StringUtil.CollectionToString(X3) + ","
        + "x4:" + Luban.StringUtil.CollectionToString(X4) + ","
        + "}";
    }
}

}

